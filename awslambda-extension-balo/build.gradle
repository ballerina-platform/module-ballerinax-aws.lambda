/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
 
dependencies {
    implementation "org.ballerinax.awslambda:awslambda-extension:${ballerinaLangVersion}"
}

configurations{
    balTools
    balAWSLambdaExt
}

dependencies{
    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}"){
        transitive = false
    }
    balAWSLambdaExt("org.ballerinax.awslambda:awslambda-extension:${ballerinaLangVersion}"){
        transitive = false
    }
}

description = 'Ballerinax - AWS Lambda Extension Balo'

task unzip {
    doLast{
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
}

def distributionPath = project.projectDir.absolutePath + "/build/extracted-distribution/jballerina-tools-${ballerinaLangVersion}"
def projectRoot = project.projectDir.absolutePath

task runScript {   
    doLast {
        exec {
            workingDir project.projectDir
            if (System.properties['os.name'].toLowerCase().contains('windows')) {
                commandLine 'cmd', '/c', "scripts/gen-balo.bat" + distributionPath + " " + projectRoot
            }else{
                commandLine 'sh', '-c', "scripts/gen-balo.sh " + distributionPath + " " + projectRoot
            }
            
        }
    }
}

task copyBalAWSLambdaExt{
    doLast{
        configurations.balAWSLambdaExt.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from artifact.getFile()
                into new File(project.buildDir, "extracted-distribution/jballerina-tools-${ballerinaLangVersion}/bre/lib/")
            }
        }
    }
}

copyBalAWSLambdaExt.dependsOn unzip
runScript.dependsOn copyBalAWSLambdaExt
build.dependsOn runScript
