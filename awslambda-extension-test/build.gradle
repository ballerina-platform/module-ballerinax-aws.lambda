/*
 * Copyright (c) 2020   , WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply from: "$rootDir/gradle/javaProject.gradle"

configurations {
    awsLambdaExtensionPlugin
    zipPartent
}

dependencies {
    
    implementation project(':awslambda-extension')

    testImplementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
    testImplementation "org.ballerinalang:ballerina-core:${ballerinaLangVersion}"
    testImplementation "org.ballerinalang:ballerina-parser:${ballerinaLangVersion}"
    testImplementation "org.ballerinalang:ballerina-tools-api:${ballerinaLangVersion}"
    testImplementation "org.testng:testng:${testngVersion}"
    testImplementation "commons-io:commons-io:${commomsIOVersion}"
    testImplementation "commons-logging:commons-logging:${commonsLoggingVersion}"
    testImplementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    testImplementation "com.google.code.gson:gson:2.7"
    testImplementation "javax.xml.bind:jaxb-api:2.3.1"
    testImplementation "org.glassfish.jaxb:jaxb-runtime:2.3.1"

    awsLambdaExtensionPlugin project(":awslambda-extension")
    zipPartent project(path: ":awslambda-extension-bala", configuration: "zipPartent")
}

description = 'Ballerinax - AWS Lambda Extension Tests'

def distributionLocation = project(":awslambda-extension-bala").buildDir.absolutePath + "/extracted-distribution/jballerina-tools-${ballerinaLangVersion}"
def zipDirLocation = configurations.zipPartent.singleFile

task copyBalAWSLambdaExt {
    doLast {
        copy {
            from configurations.awsLambdaExtensionPlugin
            into file("${distributionLocation}/bre/lib/")
        }
    }
}

task copyBallerinaArtifacts {
    dependsOn configurations.zipPartent
    doLast {
        copy {
            from file("$zipDirLocation/bala/ballerinax")
            into file("${distributionLocation}/repo/bala/ballerinax")
        }
        copy {
            from file("$zipDirLocation/cache/ballerinax")
            into file("${distributionLocation}/repo/cache/ballerinax")
        }

    }
}

task prepareDistribution {
    dependsOn copyBalAWSLambdaExt
    dependsOn copyBallerinaArtifacts
}

test {
    dependsOn prepareDistribution
    useTestNG() {
        if (project.hasProperty('LayerTesting')) {
            suites 'src/test/resources/testng-sam-cli.xml'
        } else {
            suites 'src/test/resources/testng.xml'
        }
        systemProperties = [
                "ballerina.home": System.getProperty('ballerinaPack', project.projectDir.absolutePath + "/../awslambda-extension-bala/build/extracted-distribution/jballerina-tools-${ballerinaLangVersion}"),
                ballerinaPack : System.getProperty('ballerinaPack', project.projectDir.absolutePath + "/../awslambda-extension-bala/build/extracted-distribution/jballerina-tools-${ballerinaLangVersion}/bin"),
                ballerinaLayer: System.getProperty('ballerinaPack', project.projectDir.absolutePath + "/../ballerina-layer/bootstrap"),
                sampleDir     : System.getProperty('sampleDir', project.projectDir.absolutePath + "/../samples"),
                jacocoAgentLine: "-javaagent:${configurations.jacocoRuntime.asPath}=destfile=${test.jacoco.destinationFile.absolutePath},append=true,inclnolocationclasses=true,exclclassloader=jdk.internal.reflect.DelegatingClassLoader"
        ]
    }
}

// Disable publishing artifacts
tasks.withType(PublishToMavenRepository) {
    enabled = false
}
tasks.withType(PublishToMavenLocal) {
    enabled = false
}
